"""
Streamlit Public Interface - Module 4
Mobile-responsive web interface for property price evaluation
Target: Response time ‚â§ 1.5 seconds
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import json
import time
import sqlite3
import os
from typing import Dict, List, Optional, Any

# Configure page
st.set_page_config(
    page_title="Glow Nest - –û—Ü—ñ–Ω–∫–∞ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫",
    page_icon="üè†",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Custom CSS for mobile responsiveness
st.markdown("""
<style>
    /* Mobile-first responsive design */
    .main > div {
        padding-top: 1rem;
    }
    
    .stApp > header {
        background-color: transparent;
    }
    
    .stApp {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    .main .block-container {
        padding-top: 2rem;
        padding-bottom: 1rem;
        max-width: 1200px;
    }
    
    /* Cards styling */
    .prediction-card {
        background: white;
        padding: 1.5rem;
        border-radius: 15px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        margin: 1rem 0;
    }
    
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        text-align: center;
        margin: 0.5rem;
    }
    
    /* Mobile responsive adjustments */
    @media (max-width: 768px) {
        .main .block-container {
            padding-left: 1rem;
            padding-right: 1rem;
        }
        
        .stSelectbox > div > div {
            font-size: 14px;
        }
        
        .stNumberInput > div > div > input {
            font-size: 16px; /* Prevent zoom on iOS */
        }
    }
    
    /* Custom button styling */
    .predict-button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        font-size: 16px;
        font-weight: bold;
        cursor: pointer;
        width: 100%;
        margin: 1rem 0;
    }
    
    .admin-button {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background: rgba(0,0,0,0.7);
        color: white;
        border: none;
        padding: 10px;
        border-radius: 50%;
        cursor: pointer;
        z-index: 1000;
    }
    
    /* Loading animation */
    .loading-spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #667eea;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 20px auto;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
""", unsafe_allow_html=True)


class PropertyEvaluator:
    """Property price evaluation engine"""
    
    def __init__(self):
        from cli.db_config import get_db_path
        self.db_path = get_db_path()
        
    def predict_price(self, property_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Predict property price using ML model
        
        Args:
            property_data: Property characteristics
            
        Returns:
            Dict[str, Any]: Prediction results
        """
        try:
            # Start timing
            start_time = time.time()
            
            # Import ML modules
            from ml.laml.infer import predict_property_price
            
            # Make prediction
            prediction_result = predict_property_price(property_data)
            
            # Calculate response time
            response_time = time.time() - start_time
            
            if prediction_result.get('success'):
                prediction_result['response_time'] = round(response_time, 2)
                prediction_result['performance_target_met'] = response_time <= 1.5
            
            return prediction_result
            
        except Exception as e:
            return {
                'success': False,
                'error': f"–ü–æ–º–∏–ª–∫–∞ ÔøΩÔøΩ—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è: {str(e)}",
                'predicted_price': None
            }
    
    def get_similar_properties(self, property_data: Dict[str, Any], limit: int = 5) -> List[Dict[str, Any]]:
        """Find similar properties from database"""
        try:
            if not os.path.exists(self.db_path):
                return []
            
            conn = sqlite3.connect(self.db_path)
            
            # Build query for similar properties
            district = property_data.get('district', '–¶–µ–Ω—Ç—Ä')
            area = property_data.get('area', 50)
            rooms = property_data.get('rooms', 2)
            
            # Area range: ¬±20%
            area_min = area * 0.8
            area_max = area * 1.2
            
            query = """
            SELECT title, price_usd, area, rooms, floor, district, 
                   listing_url, scraped_at, seller_type
            FROM properties 
            WHERE is_active = 1 
            AND district = ?
            AND area BETWEEN ? AND ?
            AND (rooms = ? OR rooms IS NULL)
            AND price_usd IS NOT NULL
            ORDER BY ABS(area - ?) ASC
            LIMIT ?
            """
            
            df = pd.read_sql_query(
                query, 
                conn, 
                params=[district, area_min, area_max, rooms, area, limit]
            )
            conn.close()
            
            if len(df) == 0:
                return []
            
            # Convert to list of dictionaries
            similar_properties = []
            for _, row in df.iterrows():
                similar_properties.append({
                    'title': row['title'],
                    'price_usd': row['price_usd'],
                    'area': row['area'],
                    'rooms': row['rooms'],
                    'floor': row['floor'],
                    'district': row['district'],
                    'price_per_sqm': round(row['price_usd'] / row['area'], 2) if row['area'] > 0 else None,
                    'seller_type': 'üë§ –í–ª–∞—Å–Ω–∏–∫' if row['seller_type'] == 'owner' else 'üè¢ –ê–≥–µ–Ω—Ç—Å—Ç–≤–æ',
                    'date': row['scraped_at']
                })
            
            return similar_properties
            
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —Å—Ö–æ–∂–∏—Ö –æ–±'—î–∫—Ç—ñ–≤: {str(e)}")
            return []
    
    def get_district_stats(self, district: str) -> Dict[str, Any]:
        """Get district statistics"""
        try:
            if not os.path.exists(self.db_path):
                return {}
            
            conn = sqlite3.connect(self.db_path)
            
            query = """
            SELECT 
                COUNT(*) as total_properties,
                AVG(price_usd) as avg_price,
                MIN(price_usd) as min_price,
                MAX(price_usd) as max_price,
                AVG(area) as avg_area,
                AVG(price_usd / area) as avg_price_per_sqm
            FROM properties 
            WHERE is_active = 1 
            AND district = ?
            AND price_usd IS NOT NULL
            AND area IS NOT NULL
            """
            
            result = pd.read_sql_query(query, conn, params=[district])
            conn.close()
            
            if len(result) == 0:
                return {}
            
            stats = result.iloc[0].to_dict()
            
            # Round values
            for key, value in stats.items():
                if pd.notna(value) and key != 'total_properties':
                    stats[key] = round(float(value), 2)
                elif key == 'total_properties':
                    stats[key] = int(value)
            
            return stats
            
        except Exception as e:
            return {}


# Initialize evaluator
@st.cache_resource
def get_evaluator():
    return PropertyEvaluator()


def main():
    """Main Streamlit application"""
    
    # Header
    st.markdown("""
        <div style="text-align: center; padding: 2rem 0;">
            <h1 style="color: white; font-size: 2.5rem; margin-bottom: 0.5rem;">
                üè† Glow Nest XGB
            </h1>
            <p style="color: rgba(255,255,255,0.8); font-size: 1.2rem; margin-bottom: 0;">
                –û—Ü—ñ–Ω–∫–∞ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ –≤ –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫—É
            </p>
            <p style="color: rgba(255,255,255,0.6); font-size: 0.9rem;">
                –®–≤–∏–¥–∫–∞ —Ç–∞ —Ç–æ—á–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –º–∞—à–∏–Ω–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è
            </p>
        </div>
    """, unsafe_allow_html=True)
    
    # Initialize evaluator
    evaluator = get_evaluator()
    
    # Main content in container
    with st.container():
        
        # Property evaluation form
        st.markdown('<div class="prediction-card">', unsafe_allow_html=True)
        
        st.markdown("### üìù –í–≤–µ–¥—ñ—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ")
        
        # Create form columns for mobile responsiveness
        col1, col2 = st.columns([1, 1])
        
        with col1:
            # District selection
            districts = [
                "–¶–µ–Ω—Ç—Ä", "–ü–∞—Å—ñ—á–Ω–∞", "–ë–ê–ú", "–ö–∞—Å–∫–∞–¥", 
                "–ó–∞–ª—ñ–∑–Ω–∏—á–Ω–∏–π (–í–æ–∫–∑–∞–ª)", "–ë—Ä–∞—Ç–∏", "–°–æ—Ñ—ñ—ó–≤–∫–∞", 
                "–ë—É–¥—ñ–≤–µ–ª—å–Ω–∏–∫—ñ–≤", "–ù–∞–±–µ—Ä–µÔøΩÔøΩ–Ω–∞", "–û–ø—Ä–∏—à—ñ–≤—Ü—ñ"
            ]
            
            district = st.selectbox(
                "üèòÔ∏è –†–∞–π–æ–Ω",
                districts,
                index=0,
                help="–û–±–µ—Ä—ñ—Ç—å —Ä–∞–π–æ–Ω —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ"
            )
            
            # Area input
            area = st.number_input(
                "üìê –ü–ª–æ—â–∞ (–º¬≤)",
                min_value=10.0,
                max_value=300.0,
                value=60.0,
                step=5.0,
                help="–ó–∞–≥–∞–ª—å–Ω–∞ –ø–ª–æ—â–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω–∏—Ö –º–µ—Ç—Ä–∞—Ö"
            )
            
            # Rooms input
            rooms = st.selectbox(
                "üö™ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç",
                [1, 2, 3, 4, 5],
                index=1,
                help="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∂–∏—Ç–ª–æ–≤–∏—Ö –∫—ñ–º–Ω–∞—Ç (–±–µ–∑ –∫—É—Ö–Ω—ñ —Ç–∞ –≤–∞–Ω–Ω–æ—ó)"
            )
        
        with col2:
            # Floor input
            floor = st.number_input(
                "üè¢ –ü–æ–≤ÔøΩÔøΩ—Ä—Ö",
                min_value=1,
                max_value=30,
                value=5,
                step=1,
                help="–ù–∞ —è–∫–æ–º—É –ø–æ–≤–µ—Ä—Å—ñ —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞"
            )
            
            # Total floors
            total_floors = st.number_input(
                "üèóÔ∏è –í—Å—å–æ–≥–æ –ø–æ–≤–µ—Ä—Ö—ñ–≤",
                min_value=1,
                max_value=30,
                value=9,
                step=1,
                help="–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–µ—Ä—Ö—ñ–≤ –≤ –±—É–¥–∏–Ω–∫—É"
            )
            
            # Building type
            building_type = st.selectbox(
                "üè† –¢–∏–ø –±—É–¥—ñ–≤–ª—ñ",
                ["–∫–≤–∞—Ä—Ç–∏—Ä–∞", "–Ω–æ–≤–æ–±—É–¥–æ–≤–∞", "–≤—Ç–æ—Ä–∏–Ω–∫–∞", "–∫–æ—Ç–µ–¥–∂"],
                index=0,
                help="–¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ"
            )
        
        # Additional parameters
        col3, col4 = st.columns([1, 1])
        
        with col3:
            renovation_status = st.selectbox(
                "üî® –°—Ç–∞–Ω —Ä–µ–º–æ–Ω—Ç—É",
                ["—î–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç", "–≤—ñ–¥–º—ñ–Ω–Ω–∏–π", "—Ö–æ—Ä–æ—à–∏–π", "–∫–æ—Å–º–µ—Ç–∏—á–Ω–∏–π", "–ø–æ—Ç—Ä–µ–±—É—î —Ä–µ–º–æ–Ω—Ç—É"],
                index=2,
                help="–û—Ü—ñ–Ω–∫–∞ —Å—Ç–∞–Ω—É —Ä–µ–º–æ–Ω—Ç—É"
            )
        
        with col4:
            seller_type = st.selectbox(
                "üë§ –¢–∏–ø –ø—Ä–æ–¥–∞–≤—Ü—è",
                ["owner", "agency"],
                format_func=lambda x: "üë§ –í–ª–∞—Å–Ω–∏–∫" if x == "owner" else "üè¢ –ê–≥–µ–Ω—Ç—Å—Ç–≤–æ",
                index=0,
                help="ÔøΩÔøΩ—Ç–æ –ø—Ä–æ–¥–∞—î –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å"
            )
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Predict button
        if st.button("üîÆ –û—Ü—ñ–Ω–∏—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å", key="predict_btn", help="–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏ –≤–∞—Ä—Ç–æ—Å—Ç—ñ", type="primary"):
            
            # Prepare property data
            property_data = {
                'area': area,
                'rooms': rooms,
                'floor': floor,
                'total_floors': total_floors,
                'district': district,
                'building_type': building_type,
                'renovation_status': renovation_status,
                'seller_type': seller_type,
                'listing_type': 'sale'
            }
            
            # Show loading
            with st.spinner('üîÑ –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä–∏–Ω–æ–∫ —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑—É—î–º–æ —Ü—ñ–Ω—É...'):
                
                # Make prediction
                prediction_result = evaluator.predict_price(property_data)
                
                if prediction_result.get('success'):
                    
                    # Main prediction result
                    st.markdown('<div class="prediction-card">', unsafe_allow_html=True)
                    
                    predicted_price = prediction_result['predicted_price']
                    confidence = prediction_result.get('confidence_intervals', {})
                    
                    # Price display
                    col_price1, col_price2, col_price3 = st.columns([1, 2, 1])
                    
                    with col_price2:
                        st.markdown(f"""
                            <div style="text-align: center; padding: 2rem;">
                                <h2 style="color: #667eea; margin-bottom: 0.5rem;">–û—Ü—ñ–Ω–æ—á–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å</h2>
                                <h1 style="color: #2d3748; font-size: 3rem; margin: 0;">
                                    ${predicted_price:,.0f}
                                </h1>
                                <p style="color: #666; margin-top: 0.5rem;">
                                    {predicted_price * 28:,.0f} ‚Ç¥ (–∑–∞ –∫—É—Ä—Å–æ–º –ù–ë–£)
                                </p>
                                <p style="color: #888; font-size: 0.9rem;">
                                    ${predicted_price/area:.0f}/–º¬≤ ‚Ä¢ {prediction_result.get('response_time', 0)} —ÅÔøΩÔøΩ–∫
                                </p>
                            </div>
                        """, unsafe_allow_html=True)
                    
                    # Confidence intervals
                    if confidence:
                        st.markdown("#### üìä –î—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω")
                        conf_col1, conf_col2, conf_col3 = st.columns([1, 1, 1])
                        
                        with conf_col1:
                            st.metric(
                                "–ú—ñ–Ω—ñ–º—É–º (80%)",
                                f"${confidence.get('lower_80', 0):,.0f}",
                                delta=f"{((confidence.get('lower_80', 0) - predicted_price) / predicted_price * 100):+.1f}%"
                            )
                        
                        with conf_col2:
                            st.metric(
                                "–ü—Ä–æ–≥–Ω–æ–∑",
                                f"${predicted_price:,.0f}",
                                delta=None
                            )
                        
                        with conf_col3:
                            st.metric(
                                "–ú–∞–∫—Å–∏–º—É–º (80%)",
                                f"${confidence.get('upper_80', 0):,.0f}",
                                delta=f"{((confidence.get('upper_80', 0) - predicted_price) / predicted_price * 100):+.1f}%"
                            )
                    
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    # Feature importance
                    feature_importance = prediction_result.get('feature_importance', [])
                    if feature_importance:
                        st.markdown('<div class="prediction-card">', unsafe_allow_html=True)
                        st.markdown("#### üéØ –©–æ –≤–ø–ª–∏–≤–∞—î –Ω–∞ —Ü—ñ–Ω—É")
                        
                        # Create importance chart
                        if len(feature_importance) > 0:
                            features_df = pd.DataFrame(feature_importance[:5])  # Top 5
                            
                            fig = px.bar(
                                features_df,
                                x='importance',
                                y='description',
                                orientation='h',
                                title="–¢–æ–ø-5 —Ñ–∞–∫—Ç–æ—Ä—ñ–≤ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è",
                                color='importance',
                                color_continuous_scale='viridis'
                            )
                            fig.update_layout(
                                height=300,
                                showlegend=False,
                                yaxis_title="",
                                xaxis_title="–í–ø–ª–∏–≤ –Ω–∞ —Ü—ñ–Ω—É"
                            )
                            st.plotly_chart(fig, use_container_width=True)
                        
                        st.markdown('</div>', unsafe_allow_html=True)
                    
                else:
                    st.error(f"‚ùå {prediction_result.get('error', '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è')}")
        
        # District statistics
        if st.checkbox("üìà –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–π–æ–Ω—É", value=False):
            district_stats = evaluator.get_district_stats(district)
            
            if district_stats:
                st.markdown('<div class="prediction-card">', unsafe_allow_html=True)
                st.markdown(f"#### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–π–æ–Ω—É {district}")
                
                stat_col1, stat_col2, stat_col3, stat_col4 = st.columns([1, 1, 1, 1])
                
                with stat_col1:
                    st.metric(
                        "–í—Å—å–æ–≥–æ –æ–±'—î–∫—Ç—ñ–≤",
                        district_stats.get('total_properties', 0)
                    )
                
                with stat_col2:
                    st.metric(
                        "–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞",
                        f"${district_stats.get('avg_price', 0):,.0f}"
                    )
                
                with stat_col3:
                    st.metric(
                        "–¶—ñ–Ω–∞ –∑–∞ –º¬≤",
                        f"${district_stats.get('avg_price_per_sqm', 0):,.0f}"
                    )
                
                with stat_col4:
                    st.metric(
                        "–°–µ—Ä–µ–¥–Ω—è –ø–ª–æ—â–∞",
                        f"{district_stats.get('avg_area', 0):.0f} –º¬≤"
                    )
                
                st.markdown('</div>', unsafe_allow_html=True)
        
        # Similar properties
        if st.checkbox("üîç –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ö–æ–∂—ñ –æ–±'—î–∫—Ç–∏", value=False):
            property_data = {
                'district': district,
                'area': area,
                'rooms': rooms
            }
            
            similar_properties = evaluator.get_similar_properties(property_data)
            
            if similar_properties:
                st.markdown('<div class="prediction-card">', unsafe_allow_html=True)
                st.markdown("#### üè† –°—Ö–æ–∂—ñ –æ–±'—î–∫—Ç–∏ –Ω–∞ —Ä–∏–Ω–∫—É")
                
                for i, prop in enumerate(similar_properties[:3], 1):
                    with st.expander(f"{i}. {prop['title'][:50]}..."):
                        prop_col1, prop_col2 = st.columns([2, 1])
                        
                        with prop_col1:
                            st.write(f"**–¶—ñ–Ω–∞:** ${prop['price_usd']:,.0f}")
                            st.write(f"**–ü–ª–æ—â–∞:** {prop['area']} –º¬≤")
                            st.write(f"**–ö—ñ–º–Ω–∞—Ç:** {prop['rooms'] or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}")
                            st.write(f"**–ü–æ–≤–µ—Ä—Ö:** {prop['floor'] or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}")
                        
                        with prop_col2:
                            st.write(f"**–ó–∞ –º¬≤:** ${prop['price_per_sqm'] or 0:.0f}")
                            st.write(f"**–ü—Ä–æ–¥–∞–≤–µ—Ü—å:** {prop['seller_type']}")
                            st.write(f"**–†–∞–π–æ–Ω:** {prop['district']}")
                
                st.markdown('</div>', unsafe_allow_html=True)
            else:
                st.info("üîç –°—Ö–æ–∂—ñ –æ–±'—î–∫—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–ΩÔøΩÔøΩ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
    
    # Footer
    st.markdown("""
        <div style="text-align: center; padding: 2rem 0; color: rgba(255,255,255,0.6);">
            <hr style="border-color: rgba(255,255,255,0.3);">
            <p>üè† Glow Nest XGB - –ê–Ω–∞–ª—ñ–∑ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫</p>
            <p style="font-size: 0.8rem;">
                –ü—Ä–∞—Ü—é—î –Ω–∞ LightAutoML ‚Ä¢ Prophet ‚Ä¢ Botasaurus<br>
                –û–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M')}
            </p>
        </div>
    """, unsafe_allow_html=True)
    
    # Admin button (mobile-friendly)
    st.markdown("""
        <a href="/admin" target="_blank" class="admin-button" title="–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å">
            ‚öôÔ∏è
        </a>
    """, unsafe_allow_html=True)


if __name__ == "__main__":
    main()
