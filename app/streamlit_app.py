"""
Streamlit Public Interface for Property Price Estimation
========================================================

Web application for users to estimate real estate prices in Ivano-Frankivsk.
"""

import streamlit as st
import pandas as pd
import sqlite3
import json
import os
import sys
from pathlib import Path
from datetime import datetime
import plotly.express as px
import plotly.graph_objects as go

# Add project root to path for imports
sys.path.append(str(Path(__file__).parent.parent))

try:
    from ml.laml.infer import PricePredictorLAML
    from ml.laml.utils import validate_input_data
except ImportError:
    st.error("ML modules not found. Please ensure the project is properly set up.")
    st.stop()

# Page configuration
st.set_page_config(
    page_title="Glow Nest XGB - –û—Ü—ñ–Ω–∫–∞ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ",
    page_icon="üè†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for mobile responsiveness
st.markdown("""
<style>
    .main .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }
    
    .stButton > button {
        width: 100%;
        border-radius: 8px;
        border: none;
        background: linear-gradient(90deg, #4f46e5 0%, #7c3aed 100%);
        color: white;
        font-weight: 600;
        padding: 0.75rem 1rem;
        transition: all 0.3s ease;
    }
    
    .stButton > button:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(79, 70, 229, 0.4);
    }
    
    .metric-card {
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        border: 1px solid #e5e7eb;
        margin: 0.5rem 0;
    }
    
    .price-result {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem;
        border-radius: 16px;
        text-align: center;
        margin: 1rem 0;
    }
    
    .feature-importance {
        background: #f8fafc;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #4f46e5;
        margin: 0.5rem 0;
    }
    
    @media (max-width: 768px) {
        .main .block-container {
            padding-left: 1rem;
            padding-right: 1rem;
        }
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data(ttl=300)  # Cache for 5 minutes
def load_districts_and_streets():
    """Load available districts and streets from database"""
    try:
        db_path = Path("data/olx_offers.sqlite")
        if not db_path.exists():
            return [], {}
        
        with sqlite3.connect(db_path) as conn:
            # Get districts
            districts_query = """
            SELECT DISTINCT district 
            FROM offers 
            WHERE district IS NOT NULL AND is_active = 1
            ORDER BY district
            """
            districts_df = pd.read_sql_query(districts_query, conn)
            districts = districts_df['district'].tolist()
            
            # Get streets by district
            streets_query = """
            SELECT DISTINCT district, street 
            FROM offers 
            WHERE district IS NOT NULL AND street IS NOT NULL AND is_active = 1
            ORDER BY district, street
            """
            streets_df = pd.read_sql_query(streets_query, conn)
            streets_by_district = {}
            for district in districts:
                district_streets = streets_df[streets_df['district'] == district]['street'].tolist()
                streets_by_district[district] = district_streets
            
            return districts, streets_by_district
            
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {str(e)}")
        return [], {}

@st.cache_data(ttl=300)
def load_feature_importance():
    """Load feature importance from model training"""
    try:
        importance_path = Path("reports/laml_feature_importance.csv")
        if importance_path.exists():
            df = pd.read_csv(importance_path)
            return df.head(10)  # Top 10 features
    except:
        pass
    return pd.DataFrame()

@st.cache_data(ttl=300)
def load_similar_properties(district, area_range=(50, 80), rooms=2):
    """Load similar properties from database"""
    try:
        db_path = Path("data/olx_offers.sqlite")
        if not db_path.exists():
            return pd.DataFrame()
        
        with sqlite3.connect(db_path) as conn:
            query = """
            SELECT title, price_value, area_total, rooms, floor, street, 
                   building_type, renovation, seller_type, scraped_at, url
            FROM offers 
            WHERE district = ? 
              AND is_active = 1 
              AND price_value IS NOT NULL
              AND area_total BETWEEN ? AND ?
              AND rooms = ?
              AND price_currency = 'USD'
            ORDER BY scraped_at DESC 
            LIMIT 10
            """
            
            area_min, area_max = area_range
            similar_df = pd.read_sql_query(query, conn, params=[district, area_min, area_max, rooms])
            return similar_df
            
    except Exception:
        return pd.DataFrame()

def predict_price(property_data):
    """Make price prediction using trained model"""
    try:
        model_path = Path("models/laml_price.bin")
        if not model_path.exists():
            st.error("–ú–æ–¥–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–≤—á—ñ—Ç—å –º–æ–¥–µ–ª—å.")
            return None
        
        predictor = PricePredictorLAML(str(model_path))
        result = predictor.predict_single(property_data)
        return result
        
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è: {str(e)}")
        return None

def main():
    """Main Streamlit application"""
    
    # Header
    st.markdown("""
    <div style="text-align: center; padding: 2rem 0;">
        <h1 style="color: #1f2937; margin-bottom: 0.5rem;">üè† Glow Nest XGB</h1>
        <p style="color: #6b7280; font-size: 1.2rem;">–û—Ü—ñ–Ω–∫–∞ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ –≤ –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫—É</p>
        <p style="color: #9ca3af;">–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ —Ü—ñ–Ω –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–∞—à–∏–Ω–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Load data
    districts, streets_by_district = load_districts_and_streets()
    
    if not districts:
        st.warning("‚ö†Ô∏è –î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ OLX.")
        st.markdown("""
        ### –Ø–∫ —Ä–æ–∑–ø–æ—á–∞—Ç–∏:
        1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –ø–∞—Ä—Å–∏–Ω–≥: `python cli.py scrape --mode sale --pages 5`
        2. –ù–∞–≤—á—ñ—Ç—å –º–æ–¥–µ–ª—å: `python -m ml.laml.train --src sqlite --path data/olx_offers.sqlite`
        3. –û–Ω–æ–≤—ñ—Ç—å —Ü—é —Å—Ç–æ—Ä—ñ–Ω–∫—É
        """)
        return
    
    # Main content in columns
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown("### üìä –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –ø—Ä–æ –∫–≤–∞—Ä—Ç–∏—Ä—É")
        
        # Form for property data
        with st.form("property_form"):
            # District selection
            selected_district = st.selectbox(
                "üèòÔ∏è –†–∞–π–æ–Ω",
                options=districts,
                index=0 if districts else None,
                help="–û–±–µ—Ä—ñ—Ç—å —Ä–∞–π–æ–Ω –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞"
            )
            
            # Street selection
            available_streets = streets_by_district.get(selected_district, [])
            selected_street = st.selectbox(
                "üõ£Ô∏è –í—É–ª–∏—Ü—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)",
                options=[""] + available_streets,
                help="–û–±–µ—Ä—ñ—Ç—å –≤—É–ª–∏—Ü—é –∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º"
            )
            
            # Property characteristics
            col_a, col_b = st.columns(2)
            
            with col_a:
                rooms = st.selectbox(
                    "üö™ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç",
                    options=[1, 2, 3, 4, 5],
                    index=1,  # Default: 2 rooms
                    help="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç —É –∫–≤–∞—Ä—Ç–∏—Ä—ñ"
                )
                
                area_total = st.number_input(
                    "üìê –ó–∞–≥–∞–ª—å–Ω–∞ –ø–ª–æ—â–∞ (–º¬≤)",
                    min_value=15.0,
                    max_value=300.0,
                    value=65.0,
                    step=1.0,
                    help="–ó–∞–≥–∞–ª—å–Ω–∞ –ø–ª–æ—â–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∏"
                )
                
                floor = st.number_input(
                    "üè¢ –ü–æ–≤–µ—Ä—Ö",
                    min_value=1,
                    max_value=50,
                    value=5,
                    step=1,
                    help="–ù–∞ —è–∫–æ–º—É –ø–æ–≤–µ—Ä—Å—ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∫–≤–∞—Ä—Ç–∏—Ä–∞"
                )
            
            with col_b:
                floors_total = st.number_input(
                    "üèóÔ∏è –ü–æ–≤–µ—Ä—Ö–æ–≤—ñ—Å—Ç—å –±—É–¥–∏–Ω–∫—É",
                    min_value=1,
                    max_value=50,
                    value=9,
                    step=1,
                    help="–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–µ—Ä—Ö—ñ–≤ —É –±—É–¥–∏–Ω–∫—É"
                )
                
                building_type = st.selectbox(
                    "üß± –¢–∏–ø –±—É–¥–∏–Ω–∫—É",
                    options=["–ø–∞–Ω–µ–ª—å", "—Ü–µ–≥–ª–∞", "–º–æ–Ω–æ–ª—ñ—Ç–Ω–æ-—Ü–µ–≥–ª—è–Ω–∏–π", "–Ω–æ–≤–æ–±—É–¥–æ–≤–∞", "–±–ª–æ–∫"],
                    index=0,
                    help="–¢–∏–ø –±—É–¥—ñ–≤–ª—ñ"
                )
                
                renovation = st.selectbox(
                    "üé® –†–µ–º–æ–Ω—Ç",
                    options=["–∫–æ—Å–º–µ—Ç–∏—á–Ω–∏–π", "—î–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç", "–ø—ñ–¥ —Ä–µ–º–æ–Ω—Ç", "–¥–∏–∑–∞–πÔøΩÔøΩ–µ—Ä—Å—å–∫–∏–π", "–±–µ–∑ —Ä–µ–º–æ–Ω—Ç—É"],
                    index=0,
                    help="–°—Ç–∞–Ω —Ä–µ–º–æ–Ω—Ç—É –∫–≤–∞—Ä—Ç–∏—Ä–∏"
                )
            
            # Submit button
            submitted = st.form_submit_button(
                "üí∞ –û—Ü—ñ–Ω–∏—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å",
                use_container_width=True
            )
    
    with col2:
        st.markdown("### üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü—ñ–Ω–∫–∏")
        
        if submitted:
            # Prepare data for prediction
            property_data = {
                "district": selected_district,
                "street": selected_street if selected_street else "",
                "rooms": rooms,
                "area_total": float(area_total),
                "floor": floor,
                "floors_total": floors_total,
                "building_type": building_type,
                "renovation": renovation,
                "seller_type": "owner"
            }
            
            # Make prediction
            with st.spinner("‚è≥ –û–±—Ä–æ–±–ª—è—î–º–æ –¥–∞–Ω—ñ..."):
                result = predict_price(property_data)
            
            if result and 'prediction' in result:
                prediction = result['prediction']
                price = prediction['price_usd']
                confidence = prediction['confidence_interval']
                
                # Display result
                st.markdown(f"""
                <div class="price-result">
                    <h2 style="margin: 0; font-size: 2.5rem;">${price:,.0f}</h2>
                    <p style="margin: 0.5rem 0; opacity: 0.9; font-size: 1.1rem;">
                        –ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å
                    </p>
                    <p style="margin: 0; opacity: 0.8;">
                        –î–æ–≤—ñ—Ä—á–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª: ${confidence['lower']:,.0f} - ${confidence['upper']:,.0f}
                    </p>
                </div>
                """, unsafe_allow_html=True)
                
                # Price per square meter
                price_per_sqm = price / area_total
                st.metric(
                    "üìè –¶—ñ–Ω–∞ –∑–∞ –º¬≤",
                    f"${price_per_sqm:,.0f}",
                    help="–í–∞—Ä—Ç—ñ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –º–µ—Ç—Ä–∞"
                )
                
                # Model info
                model_info = result.get('model_info', {})
                if model_info.get('validation_mape'):
                    st.info(f"üìä –¢–æ—á–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ: {model_info['validation_mape']:.1f}% MAPE")
            
            else:
                st.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ –∞–±–æ –Ω–∞–≤—á—ñ—Ç—å –º–æ–¥–µ–ª—å.")
    
    # Additional information section
    st.markdown("---")
    
    # Feature importance
    feature_importance_df = load_feature_importance()
    if not feature_importance_df.empty:
        st.markdown("### üìà –ù–∞–π–≤–∞–∂–ª–∏–≤—ñ—à—ñ —Ñ–∞–∫—Ç–æ—Ä–∏ —Ü—ñ–Ω–∏")
        
        fig = px.bar(
            feature_importance_df.head(5),
            x='importance',
            y='feature',
            orientation='h',
            title="–¢–æ–ø-5 —Ñ–∞–∫—Ç–æ—Ä—ñ–≤, —â–æ –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ —Ü—ñ–Ω—É",
            color='importance',
            color_continuous_scale='viridis'
        )
        fig.update_layout(
            height=300,
            showlegend=False,
            yaxis={'categoryorder': 'total ascending'}
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # Similar properties
    if submitted and selected_district:
        similar_properties = load_similar_properties(
            selected_district, 
            (area_total - 10, area_total + 10), 
            rooms
        )
        
        if not similar_properties.empty:
            st.markdown("### üèòÔ∏è –°—Ö–æ–∂—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è")
            
            for _, prop in similar_properties.head(5).iterrows():
                with st.expander(f"{prop['title'][:50]}... - ${prop['price_value']:,.0f}"):
                    col_a, col_b = st.columns([2, 1])
                    
                    with col_a:
                        st.write(f"**–ü–ª–æ—â–∞:** {prop['area_total']} –º¬≤")
                        st.write(f"**–ö—ñ–º–Ω–∞—Ç:** {prop['rooms']}")
                        st.write(f"**–ü–æ–≤–µ—Ä—Ö:** {prop['floor']}")
                        if prop['street']:
                            st.write(f"**–í—É–ª–∏—Ü—è:** {prop['street']}")
                        if prop['building_type']:
                            st.write(f"**–¢–∏–ø:** {prop['building_type']}")
                    
                    with col_b:
                        price_per_sqm_prop = prop['price_value'] / prop['area_total']
                        st.metric("–¶—ñ–Ω–∞ –∑–∞ –º¬≤", f"${price_per_sqm_prop:,.0f}")
                        
                        if prop['url'] and prop['url'] != 'manual_entry':
                            st.markdown(f"[üîó –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞ OLX]({prop['url']})")
    
    # Footer
    st.markdown("---")
    col_f1, col_f2, col_f3 = st.columns([1, 1, 1])
    
    with col_f1:
        if st.button("üîß –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", use_container_width=True):
            st.markdown("""
            <script>
                window.open('/admin', '_blank');
            </script>
            """, unsafe_allow_html=True)
    
    with col_f2:
        if st.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", use_container_width=True):
            st.markdown("""
            <script>
                window.open('/statistics', '_blank');
            </script>
            """, unsafe_allow_html=True)
    
    with col_f3:
        st.markdown(f"*–û–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}*")

if __name__ == "__main__":
    main()
